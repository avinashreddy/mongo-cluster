---
- name: Install Portainer
  gather_facts: no
  hosts: portainer
  
  tasks:

    - name: create portainer key file
      lineinfile:
        path: /etc/portainer/key
        create: true
        line: "{{portainer_admin_password}}"
    
    - name: Create a volume
      docker_volume:
        name: portainer_data 
      
    - name: Run portainer
      docker_container:
        name: portainer
        image: portainer/portainer:1.23.2
        restart_policy: always
        state: started
        ports:
          - "9000:9000"
          - "8000:8000"
        volumes:
           - "/var/run/docker.sock:/var/run/docker.sock"
           - "/etc/portainer/key:/etc/portainer/key"
           - "portainer_data:/data"
        command: >
            --admin-password-file /etc/portainer/key
        
- name: Install Portainer agent
  gather_facts: no
  hosts: portainer_agent
  
  tasks:
    - name: Run portainer agent
      docker_container:
        name: portainer-agent
        image: portainer/agent:1.5.1
        restart_policy: always
        state: started
        ports:
          - "9001:9001"
        volumes:
           - /var/run/docker.sock:/var/run/docker.sock
           - /var/lib/docker/volumes:/var/lib/docker/volumes
           
    - name: get portainer API token
      uri: 
        url: "http://10.200.2.10:9000/api/auth"
        method: POST
        return_content: yes
        body: 
            Username: admin
            Password: "{{portainer_admin_password}}"
        body_format: json
      register: portainer_auth_response
      until: portainer_auth_response.status == 200
      retries: 10
      delay: 5
      
    - set_fact:
        portainer_jwt: "{{portainer_auth_response.json.jwt}}"
        agent_name: "{{inventory_hostname}}"
     
    - name: 
      debug:
        msg: "{{portainer_jwt}}"
        
    - name: check if endpoint '{{agent_name}}' exists
      uri: 
        url: "http://10.200.2.10:9000/api/endpoints"
        method: GET
        headers: 
            Authorization: Bearer {{portainer_jwt}}
        return_content: yes
        body: 
            Username: admin
            Password: matrix.2019
        body_format: json
      register: portainer_endpoints_response
      until: portainer_endpoints_response.status == 200
      retries: 10
      delay: 30    
   
    - set_fact:
        agent_exists: "{{portainer_endpoints_response.json | selectattr('Name', 'equalto', agent_name) | list | length == 1}}"
        
        
 #http --form POST 10.200.2.10:9000/api/endpoints "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTU4NzE1Njg1OH0.FT1o9LTsySgZfj8pBMBUhtZBTQJ7z69QIwSyq7U8QTo" Name="test-local" EndpointType=2 URL=tcp://10.200.2.10:9001
 
    - name: add endpoint '{{agent_name}}'
      uri: 
        url: "http://10.200.2.10:9000/api/endpoints"
        method: POST
        headers: 
            Authorization: Bearer {{portainer_jwt}}
        return_content: yes
        body: 
            Name: "{{agent_name}}"
            URL: "tcp://{{hostvars[inventory_hostname].ansible_host}}:9001"
            TLS: "true"
            TLSSkipVerify: "true"
            TLSSkipClientVerify: "true"
            EndpointType: 2
        body_format: form-urlencoded
      register: portainer_endpoints_create  
      #until: portainer_endpoints_create.status == 200
      #retries: 10
      #delay: 30
      #when: agent_exists == false
      
    #- name: 
      #debug:
        #msg: "{{portainer_endpoints_create}}"      
