---        
- name: Install Portainer agent
  gather_facts: yes
  hosts: portainer_agent
  
  tasks:
    - name: Run portainer agent
      docker_container:
        name: portainer-agent
        image: portainer/agent:1.5.1
        restart_policy: always
        state: started
        ports:
          - "9001:9001"
        volumes:
           - /var/run/docker.sock:/var/run/docker.sock
           - /var/lib/docker/volumes:/var/lib/docker/volumes
        env:
          AGENT_SECRET: "{{portainer_agent_key}}"           
           
           
- name: Install Portainer
  gather_facts: yes
  hosts: portainer
  
  tasks:
    
    - name: create portainer key file
      copy:
        content: "{{portainer_admin_password}}"
        dest: /etc/portainer/key
    
    - name: Create portainer volume
      docker_volume:
        name: portainer_data 
      
    - name: Run portainer
      docker_container:
        name: portainer
        image: portainer/portainer:1.23.2
        restart_policy: always
        state: started
        ports:
          - "9000:9000"
          - "8000:8000"
        volumes:
           - "/var/run/docker.sock:/var/run/docker.sock"
           - "/etc/portainer/key:/etc/portainer/key"
           - "portainer_data:/data"
        env:
          AGENT_SECRET: "{{portainer_agent_key}}"
        command: >
            --admin-password-file /etc/portainer/key      
        

- name: Add agents endpoints
  gather_facts: yes
  hosts: portainer
  
  tasks:          
    - set_fact:
        portainer_api: "http://{{hostvars[inventory_hostname].ansible_host}}:9000/api"
        agent_name: "{{inventory_hostname}}"
        
    - name: get portainer API token
      uri: 
        url: "{{portainer_api}}/auth"
        method: POST
        return_content: yes
        body: 
            Username: admin
            Password: "{{portainer_admin_password}}"
        body_format: json
      register: portainer_auth_response
      until: portainer_auth_response.status == 200
      retries: 10
      delay: 5
        
    - set_fact:
        portainer_jwt: "{{portainer_auth_response.json.jwt}}"
        
        
    - name: get registered endpoints
      uri: 
        url: "{{portainer_api}}/endpoints"
        method: GET
        headers: 
            Authorization: Bearer {{portainer_jwt}}
        return_content: yes
        body_format: json
      register: portainer_known_endpoints_raw
      until: portainer_known_endpoints_raw.status == 200
      retries: 10
      delay: 5    
   
    - set_fact:
        portainer_known_endpoints: "{{portainer_known_endpoints_raw.json | map(attribute='Name') | list}}"
      
    - name: add endpoint
      uri: 
        url: "{{portainer_api}}/endpoints"
        method: POST
        headers: 
            Authorization: Bearer {{portainer_jwt}}
        return_content: yes
        body: 
            Name: "{{item}}"
            URL: "tcp://{{hostvars[item].ansible_host}}:9001"
            TLS: "true"
            TLSSkipVerify: "true"
            TLSSkipClientVerify: "true"
            EndpointType: 2
        body_format: form-urlencoded
      register: portainer_endpoints_create  
      until: portainer_endpoints_create.status == 200
      retries: 10
      delay: 5
      when: item not in portainer_known_endpoints
      loop: "{{groups['portainer_agent']}}"
      
              
