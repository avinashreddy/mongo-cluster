---
# ansible-playbook -b playbook-configure-hosts.yaml --extra-vars "target_hosts=jenkins"
# todo: pin versions
- name: Install docker
  gather_facts: No
  hosts: "{{target_hosts}}"

  tasks:
    - name: Install yum utils
      yum:
        name: yum-utils
        state: latest
    
    - name: Install device-mapper-persistent-data
      yum:
        name: device-mapper-persistent-data
        state: latest

    - name: Install lvm2
      yum:
        name: lvm2
        state: latest
        
    - name: Install ca-certificates
      yum:
        name: ca-certificates
        state: latest   
    
    - name: copy artifactory certs
      copy: src={{ item.src }} dest={{ item.dest }}
      with_items:
        - { src: './docker-artifactory.matrixapps.com/cacert.crt', dest: '/etc/pki/ca-trust/source/anchors/cacert.crt' }
        - { src: './docker-artifactory.matrixapps.com/cacert.pem', dest: '/etc/pki/ca-trust/source/anchors/cacert.pem' }
        - { src: './docker-artifactory.matrixapps.com/Intermediate.crt', dest: '/etc/pki/ca-trust/source/anchors/Intermediate.crt' }
    
    - name: Install ca-certificates
      command: update-ca-trust        
      become: yes 
      
    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docer-ce.repo
      become: yes
      
    - name: Install Docker
      package:
        name: docker-ce
        state: latest
      become: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Add user deploy user to docker group
      user:
        name: "{{deployments_user}}"
        # encrypt the password  
        # python -c 'import crypt; print(crypt.crypt("This is my Password", "$1$SomeSalt$"))'
        password: "{{deployments_user_password}}"
        shell: /bin/bash
        groups: docker,wheel
        append: yes
      become: yes  
      
    - name: Create config files directory if it does not exist
      file:
       path: "{{config_files_dir}}"
       state: directory
       owner: "{{deployments_user}}"
       group: "{{deployments_user}}"       
       mode: '0700'      
       
    - name: Install pip
      yum:
        name: epel-release
        state: latest  
        
    - name: Install pip
      yum:
        name: python-pip
        state: latest 
        
    - name: Install docker sdk
      pip:
        name: docker-py
        state: latest 
        
    - name: Install py mongo
      pip:
        name: pymongo
        state: latest 

    - name: Copy file with owner and permissions
      copy:
        src: './keyfile'
        dest: "{{config_files_dir}}/keyfile"
        owner: 999
        group: 999
        mode: '0400'

    - name: Create a volume
      docker_volume:
        name: mongo-data
       
    - name: Create a data container
      docker_container:
        name: mongo
        image: mongo:4.0.12
        restart_policy: "unless-stopped"
        volumes:
          -  "mongo-data:/data/db/"
          - "{{config_files_dir}}/keyfile:/opt/highgate/etc/keyfile"
        ports:
          - "27017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: "admin"
          MONGO_INITDB_ROOT_PASSWORD: "password"
        command: "--replSet rs0 --keyFile /opt/highgate/etc/keyfile"
  
    - name: Initialize an empty list for our strings
      set_fact:
        my_strings: []
      
    - name: Initialize an empty list for our strings
      set_fact:
        my_strings: "{{my_strings + [hostvars[item].ansible_host  + ':27017']}}"
      with_items: "{{groups.centos}}"      

    - debug: var=my_strings     
      
    - name: Ensure replicaset rs0 exists
      mongodb_replicaset:
        login_host: "{{ hostvars[inventory_hostname].ansible_host }}"
        login_user: admin
        login_password: password
        replica_set: rs0
        members: "{{my_strings}}"
      when: groups.centos.index(inventory_hostname) == 0

      
      
